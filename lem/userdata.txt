#!/usr/bin/bash
sysctl -w vm.max_map_count=524288
echo 'vm.max_map_count=524288' > /etc/sysctl.d/vm-max_map_count.conf
echo 'fs.file-max=131072' > /etc/sysctl.d/fs-file-max.conf
sysctl -p
ulimit -n 131072
ulimit -u 8192
modprobe xt_REDIRECT
modprobe xt_owner
modprobe xt_statistic

echo '0 8 * * * /usr/sbin/shutdown -h now' | crontab -

mkdir -p /home/ubuntu/provision
provision=/home/ubuntu/provision

curl -fsSL https://get.docker.com -o $provision/get-docker.sh

curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://raw.githubusercontent.com/rancher/k3d/main/install.sh -o $provision/k3d-install.sh

cat << EOF > $provision/install-deps.sh
#!/usr/bin/env bash

sudo apt -y update
sudo apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common kubectl jq tree vim nano bat

echo
sh ./get-docker.sh
sudo usermod -aG docker ubuntu
echo
TAG=v5.4.4 bash ./k3d-install.sh
echo

echo 'alias k="kubectl"' >> ~/.bashrc
echo 'alias cat="batcat -pp"' >> ~/.bashrc
EOF

cat << EOF > $provision/k3d-config.yaml
apiVersion: k3d.io/v1alpha2
kind: Simple
servers: 1
agents: 3
kubeAPI:
  host: ""
  hostIP: "127.0.0.1"
  hostPort: "6443"
volumes:
  - volume: /etc/machine-id:/etc/machine-id
    nodeFilters:
      - agent[0,1,2]
  - volume: /etc/machine-id:/etc/machine-id
    nodeFilters:
      - server[0]

options:
  k3s:
    extraServerArgs:
      - --disable=traefik
      - --disable=metrics-server
      - --disable=servicelb

ports:
  - port: 80:80
    nodeFilters:
      - loadbalancer
  - port: 443:443
      nodeFilters:
      - loadbalancer
EOF

cat << EOF > $provision/metallb-config.yaml
# docker network create k3d-network --driver=bridge --subnet=172.20.0.0/16 --gateway 172.20.0.1
# kubectl create -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml
# kubectl create -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml
# k3d cluster create ... --network k3d-network
apiVersion: v1
kind: ConfigMap
metadata:
    namespace: metallb-system
    name: config
data:
    config: |
    address-pools:
    - name: default
        protocol: layer2
        addresses:
        - 172.20.1.240-172.20.1.243
EOF

chown -R ubuntu $provision
chmod +x "$provision/*.sh"
